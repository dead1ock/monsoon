////////////////////////////////////////////////////////////////////////////////
// Filename: texture.ps
////////////////////////////////////////////////////////////////////////////////

/////////////
// GLOBALS //
/////////////
cbuffer PsBufferType
{
    double time;
	double padding;
};

#define complex float2

float real(complex a) {
	return a.x;	
}

complex conj(complex a) {
	return complex(a.x, -a.y);	
}

complex complex_mul(complex a, complex b) {
	return complex(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);	
}

complex complex_div(complex a, complex b) {
	return complex_mul(a,conj(b)) / real(complex_mul(b, conj(b)));
}

complex complex_pow(complex base, int exp) {
	complex ret = base;
	for(int x = 1; x < exp; x++)
		ret = complex_mul(ret, base);
	return ret;
}

complex complex_minus(complex a, complex b) {
	return complex(a.x - b.x, a.y - b.y);
}

complex complex_abs(complex a) {
	return sqrt((a.x * a.x) + (a.y * a.y));
}

complex f(complex z) {
	return ((2.0 * complex_pow(z, 8)) - (2.0 * complex_pow(z, 6)) - (2.0 * z) - cos(real(z)));
}

complex f_prime(complex z) {
	return ((16.0 * complex_pow(z, 7)) - (12.0 * complex_pow(z, 5)) - (-1.0 * sin(real(z))));
}

complex newtonsMethod(complex z) {
	return complex_minus(z,complex_div(f(z), f_prime(z)));	
}

float4 sampleColor(complex z) {
	return float4(sin(z.x*100.0)*0.5+0.5, sin(z.y*100.0)*0.5+0.5, sin((z.x+z.y)*100.0)*0.5+0.5, 1);
}

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{	
	complex z = complex(input.tex.x - 0.5, input.tex.y - 0.5) * (abs(sin(time * 0.005)) + 0.05) * 10;
	for(int i = 0; i <100; ++i) {
		z = newtonsMethod(z);
	}
	
	return sampleColor(z);
	
	//float x = (input.tex.x - 0.5);
	//float y = (input.tex.y - 0.5);
    //return float4(tan((x/y)* 1500), tan((1/x)*y * 1500), tan(-(y/x)* 1500), 1);
}

