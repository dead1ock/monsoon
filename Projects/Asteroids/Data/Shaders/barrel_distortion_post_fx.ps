////////////////////////////////////////////////////////////////////////////////
// Filename: texture.ps
////////////////////////////////////////////////////////////////////////////////

/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer DistortionBuffer
{
	float2 LensCenter;
	float2 ScreenCenter;
	float2 Scale;
	float2 ScaleIn;
	float4 HmdWarpParam;
}

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

//
// 
//
float2 HmdWarp(float2 in01)
{
	float2 theta = (in01 - LensCenter) * ScaleIn; // Scales to [-1, 1]
       float  rSq = theta.x * theta.x + theta.y * theta.y;
       float2 theta1 = theta * (HmdWarpParam.x + HmdWarpParam.y * rSq +
                       HmdWarpParam.z * rSq * rSq + HmdWarpParam.w * rSq * rSq * rSq);
       return LensCenter + Scale * theta1;
}

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{
	float2 textureCoordinate = HmdWarp(input.tex);

	if(any(clamp(textureCoordinate, ScreenCenter-float2(0.25, 0.5),
									ScreenCenter+float2(0.25, 0.5)) - textureCoordinate))
									return 0;

    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    return shaderTexture.Sample(SampleType, textureCoordinate);
}

